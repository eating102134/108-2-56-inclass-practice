chinese_order
chinese_table
chinese_order
table$`級分`
table$`級分`+1
chinese
chinese <- factor(table$`國文`,ordered=T)
table$`級分` <-table$`級分`+1
chinese
table
chinese <- factor(table$`國文`,ordered=T)
chinese
table
read_csv("https://www.dropbox.com/s/xjzg1iuuws7tcha/table.csv?dl=1") -> table
source("https://www.dropbox.com/s/5oy56om4q0857tt/student10.R?dl=1",encoding = "UTF-8")
class(table$`國文`)
chinese <- factor(table$`國文`,ordered=T)
table$`級分` <-table$`級分`+1
chinese
table
chinese+1
table$`級分`[chinese]
read_csv("https://www.dropbox.com/s/xjzg1iuuws7tcha/table.csv?dl=1") -> table
source("https://www.dropbox.com/s/5oy56om4q0857tt/student10.R?dl=1",encoding = "UTF-8")
chinese <- factor(table$`國文`,ordered=T)
table$`級分`[chinese]
table$`級分`[chinese]+1
table$`級分` <-table$`級分`[chinese]+1
table
chinese <- factor(table$`國文`,ordered=T)
chinese
chinese <- factor(table$`國文`,ordered=F)
chinese
chinese <- factor(table$`國文`,ordered=F)
chinese
chinese <- factor(table$`國文`,ordered=T)
chinese
levels(chinese)
table$`級分`[chinese]
table$`級分` <-table$`級分`[chinese]
table
chinese <- factor(table$`國文`,ordered=T)
read_csv("https://www.dropbox.com/s/xjzg1iuuws7tcha/table.csv?dl=1") -> table
source("https://www.dropbox.com/s/5oy56om4q0857tt/student10.R?dl=1",encoding = "UTF-8")
chinese <- factor(table$`國文`,ordered=T)
chinese
View(table)
table$`級分`[chinese]
chinese <- factor(table$`國文`,ordered=F)
chinese
table$`級分`[chinese]
chinese <- levels(factor(table$`國文`,ordered=F))
chinese
table$`級分`[chinese]
chinese <- levels(factor(table$`國文`,ordered=F))
chinese
chinese <- levels(factor(table$`國文`,ordered=T))
chinese
chinese <- factor(table$`國文`,ordered=T)
table$`級分`[chinese]
chinese <- factor(table$`國文`,ordered=T)
chinese
table$`級分` <-table$`級分`+1
table
View(students10)
students10$姓名[pick_NTPU]
pick_NTPU <-str_detect(students10$`志願`,"北大")
students10$`姓名`[pick_NTPU]
pick_NTPU <-str_detect(students10$`志願`,"北大")
ntpu_namelist <-students10$`姓名`[pick_NTPU]
ntpu_namelist
students10$姓名[pick_ECO]
pick_ECO <-str_detect(students10$`志願`,"北大經濟")
students10$姓名[pick_ECO]
students10pickECO <-students10$`姓名`[pick_ECO]
students10pickECO
above12 <-students10$`國文`>=12
students10$`姓名`[above12]
print(students10$國文)
print(students10$`國文`)
students10$`姓名`[above12]
above26 <-c(students10$`英文`+students10$`數學`)>=26
students10$姓名[above26]
pick_ECO <-str_detect(students10$`志願`,"北大經濟")
students10pickECO <-students10$`姓名`[pick_ECO]
above12 <-students10$`國文`>=12
students10$`姓名`[above12]
above26 <-c(students10$`英文`+students10$`數學`)>=26
students10$姓名[above26]
# ntpu_econtpu_eco
pick_ECO <-str_detect(students10$`志願`,"北大經濟")
students10pickECO <-students10$`姓名`[pick_ECO]
pick_ECO <-str_detect(students10$`志願`,"北大經濟")
students10pickECO <-students10$`姓名`[pick_ECO]
students10pickECO
above12 <-students10$`國文`>=12
students10$`姓名`[above12]
above26 <-c(students10$`英文`+students10$`數學`)>=26
students10$姓名[above26]
# ntpu_econtpu_eco
pick_ECO <-str_detect(students10$`志願`,"北大經濟")
students10pickECO <-students10$`姓名`[pick_ECO]
students10pickECO
above12 <-students10$`國文`>=12
students10$`姓名`[above12]
above26 <-c(students10$`英文`+students10$`數學`)>=26
students10$`姓名`[above26]
# ntpu_econtpu_eco
students10$姓名[pass]
pass <-c(above12,above26)
students10$`姓名`[pass]
pick_ECO<-str_detect(students10$`志願`,"北大經濟")
students10pickECO <-students10$`姓名`[pick_ECO]
students10pickECO
above12 <-students10$`國文`>=12
pass1 <-students10$`姓名`[above12]
pass1[above26]
pass1
students10pickECO
pick_ECO<-str_detect(students10$`志願`,"北大經濟")
students10pickECO <-students10$`姓名`[pick_ECO]
students10pickECO
above12 <-students10$`國文`>=12
students10$`姓名`[above12]
above26 <-c(students10$`英文`+students10$`數學`)>=26
students10$`姓名`[above26]
# ntpu_econtpu_eco
above12 <-students10$`國文`[students10pickECO]
above12
students10pickECO
students10$國文
# ntpu_econtpu_eco
students10$`國文`
students10$`國文`>=12
students10$`姓名`[students10$`國文`>=12]
# ntpu_econtpu_eco
typeof(logical)
typeof(students10$`姓名`[students10$`國文`>=12])
students10$`姓名`[students10$`國文`>=12]
students10$`姓名`[students10$`數學`+students10$`英文`>=26]
students10$`姓名`[c(students10$`數學`+students10$`英文`)>=26]
students10$`姓名`[students10$`國文`>=12]
students10$`姓名`[c(students10$`數學`+students10$`英文`)>=26]
students10$`姓名`[students10$`國文`>=12]
students10$`姓名`[c(students10$`數學`+students10$`英文`)>=26]
# ntpu_econtpu_eco
c(above12,above26)
c(above12,above26)
above12
above26
above12 <-students10$`國文`>=12
above12
above12 <-students10$`國文`>=12
above12
above26
c(above12,above26)
# ntpu_econtpu_eco
above26
above12
above26
# ntpu_econtpu_eco
above26==above12
above12
above26
above26==above12
# ntpu_econtpu_eco
above26%in%above12
above26==above12
bothpass <-above26==above12
students10$姓名[bothpass]
above12
above12
above26
bothpass <-above26==above12
students10$`姓名`[bothpass]
# ntpu_econtpu_eco
above12
above26
bothpass <-above26==above12
bothpass
students10$`姓名`[bothpass]
# ntpu_econtpu_eco
above12 <-students10$`國文`>=12
above26 <-(students10$`英文`+students10$`數學`)>=26
bothpass <-above26==above12
bothpass
students10$`姓名`[bothpass]
above12 <-students10$`國文`>=12
above26 <-(students10$`英文`+students10$`數學`)>=26
bothpass <-above26==above12
students10$`姓名`[above12]
students10$`姓名`[above26]
students10$`姓名`[bothpass]
# ntpu_econtpu_eco
print(students10["姓名","國文"])
str(students10[c("姓名","國文")])
str(students10[["姓名"])
str(students10[["姓名"]])
View(students10)
str(students10)
above12 <-students10$`國文`>=12
above26 <-(students10$`英文`+students10$`數學`)>=26
bothpass <-above26==above12
students10$`姓名`[above12]
students10$`姓名`[above26]
students10$`姓名`[bothpass]
read_csv("https://www.dropbox.com/s/xjzg1iuuws7tcha/table.csv?dl=1") -> table
source("https://www.dropbox.com/s/5oy56om4q0857tt/student10.R?dl=1",encoding = "UTF-8")
chinese <- factor(table$`國文`,ordered=T)
chinese
table$`級分` <-table$`級分`+1
table
pick_NTPU <-str_detect(students10$`志願`,"北大")
ntpu_namelist <-students10$`姓名`[pick_NTPU]
ntpu_namelist
above12 <-students10$`國文`>=12
students10$`姓名`[above12]
# ntpu_econtpu_eco
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr)
fromJSON("https://data.ntpc.gov.tw/od/data/api/CB6C96C8-D514-42EA-8591-0F4447E79C91?$format=json") -> badEmployers
violatedArticles <-unique(badEmployers$law)
violatedArticles
str_detect(badEmployers,violatedArticles[[1]])
str_detect(badEmployers,"勞動基準法第30條第5項")
sum(str_detect(badEmployers,"勞動基準法第30條第5項"))
str_detect(badEmployers$law,"勞動基準法第30條第5項")
str_detect(badEmployers$law,"勞動基準法第30條第5項")=T
View(badEmployers)
pick_NTPU <-str_detect(students10$`志願`,"北大")
ntpu_namelist <-students10$`姓名`[pick_NTPU]
ntpu_namelist
pick_NTPU
badEmployers$name[str_detect(badEmployers$law,"勞動基準法第30條第5項")]
sum(str_detect(badEmployers$law,"勞動基準法第30條第5項")])
sum(str_detect(badEmployers$law,"勞動基準法第30條第5項"))
sum(str_detect(badEmployers$law,"勞動基準法第30條第5項"))
# table_countsByArticle
str_detect(badEmployers$law,"勞動基準法第30條第5項")
as.integer(str_detect(badEmployers$law,"勞動基準法第30條第5項"))
sum(as.integer(str_detect(badEmployers$law,"勞動基準法第30條第5項")))
# table_countsByArticle
badEmployers$name[str_detect(badEmployers$law,"勞動基準法第30條第5項")]
# table_countsByArticle
str_detect(badEmployers$law,"勞動基準法第30條第5項")==T
c(str_detect(badEmployers$law,"勞動基準法第30條第5項"))==T
c(str_detect(badEmployers$law,"勞動基準法第30條第5項"))=="T"
badEmployers$law=="勞動基準法第30條第5項"
sum(badEmployers$law=="勞動基準法第30條第5項")
sum(badEmployers$law=="勞動基準法第30條第5項",na.rm=T)
sum(badEmployers$law=="勞動基準法第30條第5項",na.rm=T)
# table_countsByArticle
sum(badEmployers$law=="勞動基準法第36條",na.rm=T)
sum(badEmployers$law=="勞動基準法第30條第5項",na.rm=T)
sum(badEmployers$law=="勞動基準法第36條",na.rm=T)
# table_countsByArticle
table(sum(badEmployers$law=="勞動基準法第30條第5項",na.rm=T))
table(name="勞動基準法第30條第5項",
sum(badEmployers$law=="勞動基準法第30條第5項",na.rm=T))
table(name="勞動基準法第30條第5項",
`數目`=sum(badEmployers$law=="勞動基準法第30條第5項",na.rm=T))
table(name="勞動基準法第30條第5項")
sum(badEmployers$law=="勞動基準法第36條",na.rm=T)
sum(badEmployers$law)
table(name="勞動基準法第30條第5項")
sum(badEmployers$law=="勞動基準法第36條",na.rm=T)
# table_countsByArticle
table(name="勞動基準法第30條第5項",259)
table(name="勞動基準法第30條第5項",
count=259)
table(name="勞動基準法第30條第5項",
count="259")
table(name="勞動基準法第30條第5項",
count="259",
apple=3)
sum(badEmployers$law=="勞動基準法第36條",na.rm=T)
sum(badEmployers$law=="勞動基準法第36條",na.rm=T)# table_countsByArticle
sum(badEmployers$law==violatedArticles[[1]],na.rm=T)
table(mame=c("勞動基準法第30條第5項" ,sum(badEmployers$law==violatedArticles[[1]],na.rm=T))
)
# table_countsByArticle
table(mame="勞動基準法第30條第5項" ,sum(badEmployers$law==violatedArticles[[1]],na.rm=T))
# table_countsByArticle
table(mame="勞動基準法第30條第5項",
`數目`=sum(badEmployers$law==violatedArticles[[1]],na.rm=T))
# table_countsByArticle
table1 <-table(mame="勞動基準法第30條第5項",
`數目`=sum(badEmployers$law==violatedArticles[[1]],na.rm=T))
# table_countsByArticle
table1
str(table)
table1 <-table(mame="勞動基準法第30條第5項",     `數目`=sum(badEmployers$law==violatedArticles[[1]],na.rm=T))
# table_countsByArticle
table1 <-table(mame=violatedArticles,     `數目`=sum(badEmployers$law==violatedArticles[[1]],na.rm=T))
table1
table1 <-table(mame=violatedArticles,     `數目`=sum(badEmployers$law==violatedArticles[[1]],na.rm=T))
table1 <-table(mame=violatedArticles,     `數目`=sum(badEmployers$law==violatedArticles[[1]],na.rm=T))
table1 <-table(mame="violatedArticles",     `數目`=sum(badEmployers$law==violatedArticles[[1]],na.rm=T))
table1
badEmployers$dt==01
sum(badEmployers$dt==01)
knitr::opts_chunk$set(echo = TRUE)
char1 <- c("Wild","Apple","Donald","May","Avocada")
factor1 <- factor(char1)
levels(factor1)
char2 <- c("蔡英文","習近平","Donald Trump","蔡頭")
factor2 <- factor(char2)
levels(factor2)
sort(
str_sub(char2,1,1)
)
library(stringr)
sort(
str_sub(char2,1,1)
)
sort(
str_sub(char2,2,2)
)
char2 <- c("蔡英文","習近平","Donald Trump","蔡頭")
factor2 <- factor(char2)
levels(factor2)
library(stringr)
sort(
str_sub(char2,1,1)
)
sort(
str_sub(char2,2,2)
)
jsonlite::fromJSON("https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json") -> covid19
# 不可排序類別：性別、縣市、是否境外移入
covid19$縣市 <-
factor(covid19$縣市)
covid19$性別 <-
factor(covid19$性別)
covid19$是否為境外移入 <-
factor(
covid19$是否為境外移入
)
# 不可排序類別：性別、縣市、是否境外移入
covid19$`縣市` <-
factor(covid19$`縣市`)
covid19$`性別` <-
factor(covid19$`性別`)
covid19$`是否為境外移入` <-
factor(
covid19$`是否為境外移入`
)
# 可排序類別資料：年齡層
covid19$年齡層 <-
factor(
covid19$年齡層,
ordered=TRUE
)
levels(covid19$縣市)
levels(covid19$性別)
levels(covid19$是否為境外移入)
covid19$年齡層
levels(covid19$年齡層)
##factor(目前的factor向量, levels=自訂排序)
#levels如果放在第二個可以不寫levels= 因為程式本來就這樣規範
levels(covid19$性別)
covid19$性別 <- factor(covid19$性別, c("男","女"))
jsonlite::fromJSON(
"https://www.dropbox.com/s/jckqryeh5zeat5w/regionPopulation.json?dl=1"
) -> population
unlist(population) -> population
print(population)
class(population) # 判斷出是named integer vector
names(population) # 元素名稱是台灣各縣市
##2 留下levels中有的popluation元素
levels(covid19$縣市) # 是名稱字串向量
# 由於population元素值有names，可以用`[名稱字串向量]`取出所要的
levels(covid19$縣市) -> levelsInData
population[levelsInData] -> population
##2 留下levels中有的popluation元素
levels(covid19$`縣市`) # 是名稱字串向量
##3 將population由大排到小(sort(x, decreasing=T)可將x numeric vector由大排到小。
population <- sort(population, decreasing=T)
population
##排完後population第一個元素值最大，它的名稱即是人口最多的縣市，第二元素值次大，它名稱是人口第二多縣市，依此類推。我們要的是population排完後的元素名稱。
newLevels <- names(population)
newLevels
covid19$縣市 <-
factor(
covid19$縣市, levels=newLevels
)
levels(covid19$縣市)
levels(covid19$年齡層)
level_names <- levels(covid19$年齡層)
startingAges <- stringr::str_extract(
level_names,
"^[0-9]+" # regex：開頭的一串數字
)
level_names <- levels(covid19$`年齡層`)
startingAges <- stringr::str_extract(
level_names,
"^[0-9]+" # regex：開頭的一串數字
)
startingAges
#將startingAges變成named integer vector
##(因為我們需要name vector才可以用數字排出我們想要的name再用names函數取出名字設定成我們的level)
# 要numerical class排的才一定對
startingAges <- as.integer(startingAges)
names(startingAges) <- level_names
names(startingAges)
#將startingAges從小排到大。
sort(startingAges) -> startingAges
startingAges
#重設levels排序
covid19$年齡層 <-
factor(
covid19$年齡層, names(startingAges)
)
levels(covid19$年齡層)
factor1 <- factor(
c("A","A","C","A","D","F","D","D")
)
factor1
levels(factor1) <- c("優","佳","尚可","普")
factor1
#也可以只改level裡面的其中一部份
levels(factor1)[[1]] <- "Excellent"
levels(factor1)[c(3,4)] <- c("C","D")
factor1
factor1 <- factor(c("新北市","台北市","台中市","彰化市","基隆市","苗栗縣","苗栗縣"))
factor1
factor1 <- factor(c("新北市","台北市","台中市","彰化市","基隆市","苗栗縣","苗栗縣"))
factor1
#會發現他的level有6個 所以可以直接改level
levels(factor1) <- c("中部","北部","北部","中部","北部","中部")
factor1
factor1 <- factor(c("0-4歲","5-9歲","10歲以上","0-4歲","5-9歲","5-9歲","10歲以上"))
factor1
factor1 <- factor(c("0-4歲","5-9歲","10歲以上","0-4歲","5-9歲","5-9歲","10歲以上"))
factor1
#這個一樣level有3個 直接改
levels(factor1) <- c("0-9歲","10歲以上","0-9歲")
factor1
covid19$`地區` <- covid19$縣市
levels(covid19$`地區`)
currentLevels <- levels(covid19$`地區`)
currentLevels
# 整併
north_regex <- "宜蘭縣|基隆市|[台臺]北市|新北市|桃園市|新竹市|新竹縣"
middle_regex <- "苗栗縣|[台臺]中市|彰化縣|南投縣|雲林縣"
south_regex <-
"嘉義市|嘉義縣|[台臺]南[縣市]|高雄市|屏東縣|澎湖縣"
east_regex <-"花蓮縣|台東縣"
#這個regex是代表字組的strip 第一個是宜蘭縣 最後一個是新竹縣 裡面的第三個字組有點特別 用[]的意思是台或是臺都可以 第三個字組其實就等於台北市|臺北市
currentLevels <- str_replace(currentLevels,
north_regex, "北部")
currentLevels <- str_replace(currentLevels,
middle_regex, "中部")
currentLevels <- str_replace(currentLevels,
south_regex, "南部")
newLevels <- str_replace(currentLevels,
east_regex, "東部")
currentLevels
levels(covid19$`地區`) <- newLevels
covid19$`地區`
levels(covid19$年齡層)
# 創造10歲間距的所有可能
start <- seq(5, 55, by=10) # 由5到55，每個值差10的數值向量
end <- seq(14, 64, by=10)
middleLevels <-
rep(
paste0(start,"-",end),
each=2) # 每個新間距要2個
newLevels <- c("4", middleLevels, "65+", "65+")
levels(covid19$年齡層) <- newLevels
covid19$年齡層
levels(covid19$`年齡層`)
# 創造10歲間距的所有可能
start <- seq(5, 55, by=10) # 由5到55，每個值差10的數值向量
end <- seq(14, 64, by=10)
##這邊有用到一個特別的函數叫seq 它代表的意思是seq(start,end,by=) 以上面舉例 就是第一個數字是5然後再來每次加10 所以是5,15,25,...一直持續下去到55
middleLevels <-
rep(
paste0(start,"-",end),
each=2) # 每個新間距要2個
newLevels <- c("4", middleLevels, "65+", "65+")
##然後一樣用之前教過的paste0將start還有end合起來中間多加一個"-"
##這裡也有一個新的函數叫做rep()是repeat的意思 就是把向量擴充後面的each= 就是擴充幾次 例如rep(x,each=2)
levels(covid19$`年齡層`) <- newLevels
covid19$年齡層
factor2 <-
factor(c("好","好","普通","普通", "好"))
levels(factor2)
##加一筆新資料“差”（之前沒有這類）
factor2[[6]] <- "差"
factor2 # 元素6變NA
#先擴大levels, 再加新資料
factor2 <-
factor(c("好","好","普通","普通", "好"))
levels(factor2)
# 先擴大levels
levels(factor2) <- c(levels(factor2), "差")
levels(factor2)
factor2[[6]] <- "差"
factor2
##factor無法用c(...)把兩個factor vector串接在一起：
# non factor
char1 <- c("小明","小美")
char2 <- c("大雄","技安")
c(char1, char2)
# factor
factor1 <- factor(c("好", "壞", "壞"))
factor2 <- factor(c("壞", "好", "好"))
c(factor1, factor2)
##正確接法
factor1[4:6] <- factor2
factor1
