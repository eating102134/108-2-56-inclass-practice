students10$`姓名`[above12]
# ntpu_econtpu_eco
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr)
fromJSON("https://data.ntpc.gov.tw/od/data/api/CB6C96C8-D514-42EA-8591-0F4447E79C91?$format=json") -> badEmployers
violatedArticles <-unique(badEmployers$law)
violatedArticles
str_detect(badEmployers,violatedArticles[[1]])
str_detect(badEmployers,"勞動基準法第30條第5項")
sum(str_detect(badEmployers,"勞動基準法第30條第5項"))
str_detect(badEmployers$law,"勞動基準法第30條第5項")
str_detect(badEmployers$law,"勞動基準法第30條第5項")=T
View(badEmployers)
pick_NTPU <-str_detect(students10$`志願`,"北大")
ntpu_namelist <-students10$`姓名`[pick_NTPU]
ntpu_namelist
pick_NTPU
badEmployers$name[str_detect(badEmployers$law,"勞動基準法第30條第5項")]
sum(str_detect(badEmployers$law,"勞動基準法第30條第5項")])
sum(str_detect(badEmployers$law,"勞動基準法第30條第5項"))
sum(str_detect(badEmployers$law,"勞動基準法第30條第5項"))
# table_countsByArticle
str_detect(badEmployers$law,"勞動基準法第30條第5項")
as.integer(str_detect(badEmployers$law,"勞動基準法第30條第5項"))
sum(as.integer(str_detect(badEmployers$law,"勞動基準法第30條第5項")))
# table_countsByArticle
badEmployers$name[str_detect(badEmployers$law,"勞動基準法第30條第5項")]
# table_countsByArticle
str_detect(badEmployers$law,"勞動基準法第30條第5項")==T
c(str_detect(badEmployers$law,"勞動基準法第30條第5項"))==T
c(str_detect(badEmployers$law,"勞動基準法第30條第5項"))=="T"
badEmployers$law=="勞動基準法第30條第5項"
sum(badEmployers$law=="勞動基準法第30條第5項")
sum(badEmployers$law=="勞動基準法第30條第5項",na.rm=T)
sum(badEmployers$law=="勞動基準法第30條第5項",na.rm=T)
# table_countsByArticle
sum(badEmployers$law=="勞動基準法第36條",na.rm=T)
sum(badEmployers$law=="勞動基準法第30條第5項",na.rm=T)
sum(badEmployers$law=="勞動基準法第36條",na.rm=T)
# table_countsByArticle
table(sum(badEmployers$law=="勞動基準法第30條第5項",na.rm=T))
table(name="勞動基準法第30條第5項",
sum(badEmployers$law=="勞動基準法第30條第5項",na.rm=T))
table(name="勞動基準法第30條第5項",
`數目`=sum(badEmployers$law=="勞動基準法第30條第5項",na.rm=T))
table(name="勞動基準法第30條第5項")
sum(badEmployers$law=="勞動基準法第36條",na.rm=T)
sum(badEmployers$law)
table(name="勞動基準法第30條第5項")
sum(badEmployers$law=="勞動基準法第36條",na.rm=T)
# table_countsByArticle
table(name="勞動基準法第30條第5項",259)
table(name="勞動基準法第30條第5項",
count=259)
table(name="勞動基準法第30條第5項",
count="259")
table(name="勞動基準法第30條第5項",
count="259",
apple=3)
sum(badEmployers$law=="勞動基準法第36條",na.rm=T)
sum(badEmployers$law=="勞動基準法第36條",na.rm=T)# table_countsByArticle
sum(badEmployers$law==violatedArticles[[1]],na.rm=T)
table(mame=c("勞動基準法第30條第5項" ,sum(badEmployers$law==violatedArticles[[1]],na.rm=T))
)
# table_countsByArticle
table(mame="勞動基準法第30條第5項" ,sum(badEmployers$law==violatedArticles[[1]],na.rm=T))
# table_countsByArticle
table(mame="勞動基準法第30條第5項",
`數目`=sum(badEmployers$law==violatedArticles[[1]],na.rm=T))
# table_countsByArticle
table1 <-table(mame="勞動基準法第30條第5項",
`數目`=sum(badEmployers$law==violatedArticles[[1]],na.rm=T))
# table_countsByArticle
table1
str(table)
table1 <-table(mame="勞動基準法第30條第5項",     `數目`=sum(badEmployers$law==violatedArticles[[1]],na.rm=T))
# table_countsByArticle
table1 <-table(mame=violatedArticles,     `數目`=sum(badEmployers$law==violatedArticles[[1]],na.rm=T))
table1
table1 <-table(mame=violatedArticles,     `數目`=sum(badEmployers$law==violatedArticles[[1]],na.rm=T))
table1 <-table(mame=violatedArticles,     `數目`=sum(badEmployers$law==violatedArticles[[1]],na.rm=T))
table1 <-table(mame="violatedArticles",     `數目`=sum(badEmployers$law==violatedArticles[[1]],na.rm=T))
table1
badEmployers$dt==01
sum(badEmployers$dt==01)
knitr::opts_chunk$set(echo = TRUE)
char1 <- c("Wild","Apple","Donald","May","Avocada")
factor1 <- factor(char1)
levels(factor1)
char2 <- c("蔡英文","習近平","Donald Trump","蔡頭")
factor2 <- factor(char2)
levels(factor2)
sort(
str_sub(char2,1,1)
)
library(stringr)
sort(
str_sub(char2,1,1)
)
sort(
str_sub(char2,2,2)
)
char2 <- c("蔡英文","習近平","Donald Trump","蔡頭")
factor2 <- factor(char2)
levels(factor2)
library(stringr)
sort(
str_sub(char2,1,1)
)
sort(
str_sub(char2,2,2)
)
jsonlite::fromJSON("https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json") -> covid19
# 不可排序類別：性別、縣市、是否境外移入
covid19$縣市 <-
factor(covid19$縣市)
covid19$性別 <-
factor(covid19$性別)
covid19$是否為境外移入 <-
factor(
covid19$是否為境外移入
)
# 不可排序類別：性別、縣市、是否境外移入
covid19$`縣市` <-
factor(covid19$`縣市`)
covid19$`性別` <-
factor(covid19$`性別`)
covid19$`是否為境外移入` <-
factor(
covid19$`是否為境外移入`
)
# 可排序類別資料：年齡層
covid19$年齡層 <-
factor(
covid19$年齡層,
ordered=TRUE
)
levels(covid19$縣市)
levels(covid19$性別)
levels(covid19$是否為境外移入)
covid19$年齡層
levels(covid19$年齡層)
##factor(目前的factor向量, levels=自訂排序)
#levels如果放在第二個可以不寫levels= 因為程式本來就這樣規範
levels(covid19$性別)
covid19$性別 <- factor(covid19$性別, c("男","女"))
jsonlite::fromJSON(
"https://www.dropbox.com/s/jckqryeh5zeat5w/regionPopulation.json?dl=1"
) -> population
unlist(population) -> population
print(population)
class(population) # 判斷出是named integer vector
names(population) # 元素名稱是台灣各縣市
##2 留下levels中有的popluation元素
levels(covid19$縣市) # 是名稱字串向量
# 由於population元素值有names，可以用`[名稱字串向量]`取出所要的
levels(covid19$縣市) -> levelsInData
population[levelsInData] -> population
##2 留下levels中有的popluation元素
levels(covid19$`縣市`) # 是名稱字串向量
##3 將population由大排到小(sort(x, decreasing=T)可將x numeric vector由大排到小。
population <- sort(population, decreasing=T)
population
##排完後population第一個元素值最大，它的名稱即是人口最多的縣市，第二元素值次大，它名稱是人口第二多縣市，依此類推。我們要的是population排完後的元素名稱。
newLevels <- names(population)
newLevels
covid19$縣市 <-
factor(
covid19$縣市, levels=newLevels
)
levels(covid19$縣市)
levels(covid19$年齡層)
level_names <- levels(covid19$年齡層)
startingAges <- stringr::str_extract(
level_names,
"^[0-9]+" # regex：開頭的一串數字
)
level_names <- levels(covid19$`年齡層`)
startingAges <- stringr::str_extract(
level_names,
"^[0-9]+" # regex：開頭的一串數字
)
startingAges
#將startingAges變成named integer vector
##(因為我們需要name vector才可以用數字排出我們想要的name再用names函數取出名字設定成我們的level)
# 要numerical class排的才一定對
startingAges <- as.integer(startingAges)
names(startingAges) <- level_names
names(startingAges)
#將startingAges從小排到大。
sort(startingAges) -> startingAges
startingAges
#重設levels排序
covid19$年齡層 <-
factor(
covid19$年齡層, names(startingAges)
)
levels(covid19$年齡層)
factor1 <- factor(
c("A","A","C","A","D","F","D","D")
)
factor1
levels(factor1) <- c("優","佳","尚可","普")
factor1
#也可以只改level裡面的其中一部份
levels(factor1)[[1]] <- "Excellent"
levels(factor1)[c(3,4)] <- c("C","D")
factor1
factor1 <- factor(c("新北市","台北市","台中市","彰化市","基隆市","苗栗縣","苗栗縣"))
factor1
factor1 <- factor(c("新北市","台北市","台中市","彰化市","基隆市","苗栗縣","苗栗縣"))
factor1
#會發現他的level有6個 所以可以直接改level
levels(factor1) <- c("中部","北部","北部","中部","北部","中部")
factor1
factor1 <- factor(c("0-4歲","5-9歲","10歲以上","0-4歲","5-9歲","5-9歲","10歲以上"))
factor1
factor1 <- factor(c("0-4歲","5-9歲","10歲以上","0-4歲","5-9歲","5-9歲","10歲以上"))
factor1
#這個一樣level有3個 直接改
levels(factor1) <- c("0-9歲","10歲以上","0-9歲")
factor1
covid19$`地區` <- covid19$縣市
levels(covid19$`地區`)
currentLevels <- levels(covid19$`地區`)
currentLevels
# 整併
north_regex <- "宜蘭縣|基隆市|[台臺]北市|新北市|桃園市|新竹市|新竹縣"
middle_regex <- "苗栗縣|[台臺]中市|彰化縣|南投縣|雲林縣"
south_regex <-
"嘉義市|嘉義縣|[台臺]南[縣市]|高雄市|屏東縣|澎湖縣"
east_regex <-"花蓮縣|台東縣"
#這個regex是代表字組的strip 第一個是宜蘭縣 最後一個是新竹縣 裡面的第三個字組有點特別 用[]的意思是台或是臺都可以 第三個字組其實就等於台北市|臺北市
currentLevels <- str_replace(currentLevels,
north_regex, "北部")
currentLevels <- str_replace(currentLevels,
middle_regex, "中部")
currentLevels <- str_replace(currentLevels,
south_regex, "南部")
newLevels <- str_replace(currentLevels,
east_regex, "東部")
currentLevels
levels(covid19$`地區`) <- newLevels
covid19$`地區`
levels(covid19$年齡層)
# 創造10歲間距的所有可能
start <- seq(5, 55, by=10) # 由5到55，每個值差10的數值向量
end <- seq(14, 64, by=10)
middleLevels <-
rep(
paste0(start,"-",end),
each=2) # 每個新間距要2個
newLevels <- c("4", middleLevels, "65+", "65+")
levels(covid19$年齡層) <- newLevels
covid19$年齡層
levels(covid19$`年齡層`)
# 創造10歲間距的所有可能
start <- seq(5, 55, by=10) # 由5到55，每個值差10的數值向量
end <- seq(14, 64, by=10)
##這邊有用到一個特別的函數叫seq 它代表的意思是seq(start,end,by=) 以上面舉例 就是第一個數字是5然後再來每次加10 所以是5,15,25,...一直持續下去到55
middleLevels <-
rep(
paste0(start,"-",end),
each=2) # 每個新間距要2個
newLevels <- c("4", middleLevels, "65+", "65+")
##然後一樣用之前教過的paste0將start還有end合起來中間多加一個"-"
##這裡也有一個新的函數叫做rep()是repeat的意思 就是把向量擴充後面的each= 就是擴充幾次 例如rep(x,each=2)
levels(covid19$`年齡層`) <- newLevels
covid19$年齡層
factor2 <-
factor(c("好","好","普通","普通", "好"))
levels(factor2)
##加一筆新資料“差”（之前沒有這類）
factor2[[6]] <- "差"
factor2 # 元素6變NA
#先擴大levels, 再加新資料
factor2 <-
factor(c("好","好","普通","普通", "好"))
levels(factor2)
# 先擴大levels
levels(factor2) <- c(levels(factor2), "差")
levels(factor2)
factor2[[6]] <- "差"
factor2
##factor無法用c(...)把兩個factor vector串接在一起：
# non factor
char1 <- c("小明","小美")
char2 <- c("大雄","技安")
c(char1, char2)
# factor
factor1 <- factor(c("好", "壞", "壞"))
factor2 <- factor(c("壞", "好", "好"))
c(factor1, factor2)
##正確接法
factor1[4:6] <- factor2
factor1
knitr::opts_chunk$set(echo = TRUE)
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
#邏輯向量間（即「要/不要」向量）的操作主要是以下幾個：
#&: AND
#|: OR
str(example)
pick_above170 <- example$height >= 170
pick_bloodB <- example$bloodType == "B"
pick_loveFood <-
stringr::str_detect(example$hobby,"美食")
pick_na <- is.na(example$weight)
pick_after98 <-
example$birthday >= lubridate::ymd("1998-01-01")
set_TaipeiMetro <- c("Taipei","New Taipei")
pick_fromTaipeiMetro <-
example$residence %in% set_TaipeiMetro
str(example[c("name","hobby","bloodType")])
example$name[
pick_loveFood & pick_bloodB
]
example[c("name","birthday","residence")]
example$name[
pick_after98 | !pick_fromTaipeiMetro
]
example$name[
pick_after98 & pick_fromTaipeiMetro & pick_bloodB
]
#很多個邏輯向量(用且連在一起)出來的值還是邏輯向量
pick_above170 & pick_bloodB
library(stringr)
library(glue)
str_sub("410873002", 5, 6)
lubridate::ymd(
c("民國108年12月5日","民國98年10月5日")
)
lubridate::ymd(
c(
"民國2019年12月05日",
"馬丁2019的12課05muydifícil",
"助教2019Emily12解說05真棒",
"2019R12課程05すごい",
"R程式2019的12期中考05とても変態"
)
)
#而且lubridate會忽略非數字文字 所以加上1911後不用管民國 這兩個字 就可以用ymd()
str_extract_all(
c("民國108年12月5日","民國98年10月5日"),
"(?<=民國)[0-9]{2,3}(?=年)"
) # 回傳list
str_extract(
c("民國108年12月5日","民國98年10月5日"),
"(?<=民國)[0-9]{2,3}(?=年)"
) # 回傳vector
heartSutra <- c("舍利子，色不異空，空不異色；色即是空，空即是色。")
str_view_all(heartSutra,"色") # 檢視
install.packages("htmlwidgets")
heartSutra <- c("舍利子，色不異空，空不異色；色即是空，空即是色。")
install.packages("htmlwidgets")
str_view_all(heartSutra,"色") # 檢視
str_count(heartSutra,"色") # 計數
heartSutra <- c("舍利子，色不異空，空不異色；色即是空，空即是色。")
str_view_all(heartSutra,"色") # 檢視
str_count(heartSutra,"色") # 計數
studentIds <- c("410873029","410773005","410772035","410562123")
# 取出學號中的入學屆為107或108
str_view_all(studentIds,"(107|108)")
str_view_all(studentIds, "107|108") # 可不寫()
# 是否來自107或108學屆
str_detect(studentIds, "107|108")
Ids <- c("A283743192","B829103720","A10920402","C291022384")
str_view_all(Ids, "[AC]")
str_detect(Ids, "[AC]") # 偵測 出現A、C
str_extract(Ids,"[A-Z]") # 取出 A-Z的字元
strip1 <- "[0-9]"
strip2 <- "(櫻桃|777|紅心)" # 字群組合strip因為等下放中間所以用()括起來
strip3 <- "[A-Z]"
myRegexSlotMachine <- paste0(strip1,strip2,strip3)
print(myRegexSlotMachine)
claimA <- "我得到A檸檬99"
claimB <- "我的是7777Z"
claimC <- "我玩了兩次，一次是7蘋果H，另一次是5紅心J"
# 顯示吻合的出象
str_view(
c(claimA,claimB,claimC),
pattern=myRegexSlotMachine
)
# 是否有吻合的出象
str_detect(
c(claimA,claimB,claimC),
pattern=myRegexSlotMachine
)
headline <- "資科系的謝陳官乃飛鳶書院三大名師，其中謝無雙的策略運算，陳大器的數理資科學，及官求敗的運算成本更是打通演算思維任督二脈的三大好課。書院目前有陳一、陳二、陳三四這三名學生。"
# 顯示所有符合規則的
str_view_all(headline, "謝陳官") # 固定字組
str_count(headline,"謝陳官")
str_view_all(headline, "[謝陳官]") # 有1個strip: 出象有3個可能字元
str_count(headline, "[謝陳官]")
str_view_all(headline, "謝無雙|官求敗") # 有1個strip，出象有2個字組
str_count(headline, "謝無雙|官求敗")
str_view_all(headline, "陳[^官]") # 固定字元＋有1個strip： 出象為排官的字元
str_count(headline, "陳[^官]")
addresses <- c(
'臺中市后里區公館里尾社路385號',
'新竹市東區科學園路125號1樓'
)
strip1 <- strip2 <-strip3 <- "[0-9]"
strip4 <- "號"
mid <-paste0(strip1,strip2,strip3,strip4)
print(mid)
str_extract(addresses,mid)
#example將以下地址的號數取出（含“號”字）
addresses <- c(
'臺中市后里區公館里尾社路385號',
'新竹市東區科學園路125號1樓',
'新竹市北區竹光路99號',
'金門縣金城鎮賢庵里山前33號',
'臺中市南屯區工業區二十四路23號1樓')
myRegexSlotMachine <- "[0-9]+號"
print(myRegexSlotMachine)
str_view_all(addresses,myRegexSlotMachine)
str_extract(addresses,myRegexSlotMachine)
str_view_all(addresses,"[0-9]+") # 樓號也會選到
phrase <- c("唧唧复唧唧")
phrase <- c("唧唧复唧唧")
# 目標是前面的唧唧
target_regex <- "唧唧"
pattern <- glue::glue("^{target_regex}")
print(pattern)
str_view(phrase, pattern)
# 目標是後面的唧唧
target_regex2 <- "唧唧"
pattern <- glue::glue("{target_regex2}$")
print(pattern)
str_view(phrase, pattern)
twDate <-  c("民國108年12月5日","民國98年10月5日")
library(stringr)
# 準備regex:
## 取出：「前有」民國，「後有」年的「數字」「們」
## "(?<={A_regex}){target_regex}(?={B_regex})"
target_regex <- "[0-9]+"
A_regex <- "民國"
B_regex <- "年"
regex_pattern <- glue::glue(
"(?<={A_regex}){target_regex}(?={B_regex})"
)
print(regex_pattern)
## 如果同學已經很熟就可以直接寫
regex_pattern <-
"(?<=民國)[0-9]+(?=年)"
# 取出民國年，計算西元年
year <-
str_extract(
twDate,
regex_pattern)
westernYear <- as.integer(year)+1911
# 替換民國xx年的xx成西元年數字
str_replace(
twDate,
regex_pattern,  # 要換掉的文字
as.character(westernYear) # 要替換的內容
) -> twDate_reformat
print(twDate_reformat)
lubridate::ymd(twDate_reformat)
twDate <-  c("民國108年12月5日","民國98年10月5日")
library(stringr)
# 準備regex:
## 取出：「前有」民國，「後有」年的「數字」「們」
## "(?<={A_regex}){target_regex}(?={B_regex})"
target_regex <- "[0-9]+"
A_regex <- "民國"
B_regex <- "年"
regex_pattern <- glue::glue(
"(?<={A_regex}){target_regex}(?={B_regex})"
)
print(regex_pattern)
## 如果同學已經很熟就可以直接寫
regex_pattern <-
"(?<=民國)[0-9]+(?=年)"
# 取出民國年，計算西元年
year <-
str_extract(
twDate,
regex_pattern)
westernYear <- as.integer(year)+1911
# 替換民國xx年的xx成西元年數字
str_replace(
twDate,
regex_pattern,  # 要換掉的文字
as.character(westernYear) # 要替換的內容
) -> twDate_reformat
print(twDate_reformat)
lubridate::ymd(twDate_reformat)
regex1 <-"[0-9]+"(?=號)
regex1 <-"[0-9]+"(? = 號)
regex1 <-"[0-9]+"(?="號")
regex1 <-"[0-9]+(?=號)"
str_extract(addresses,regex1)
