---
title: '20200523'
author: '"蔡宜庭"'
date: "2020/5/23"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## R Markdown

This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.

When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:

```{r cars}
summary(cars)
```

## Including Plots

You can also embed plots, for example:

```{r pressure, echo=FALSE}
plot(pressure)
```

Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.

```{r}
library(purrr)
```

```{r}
example <- list(
  name=c("小明","小花","小新","美美"),
  height=c(175,166,170,160),
  weight=c(77,NA,60,43),
  birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
  hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
  residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
  allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
  bloodType=c("A","B","B","O")
)
```

#example想拿出小新的所有資料
```{r}
pick <- example$name =="小新"
example$name[pick]
example$height[pick]
example[[1]][pick]
example[[2]][pick]
example[[3]][pick]
```
```{r}
library(purrr)
map(example, ~ .x[pick])
```
#完整map()的用法為:map(對象物件, ~對每個元素作的動作)
```{r}
jsonlite::fromJSON("https://www.dropbox.com/s/6252gbdnv9owljm/dance.json?dl=1", simplifyDataFrame = F) -> dance
```
#example舞蹈表演
```{r}
dance[[1]]$title
dance[[2]]$title
map(dance, ~ .x$title)
```
#examole每個表演有時不止演出一場，每個表演的場次總數
```{r}
length(dance[[1]]$showInfo)
length(dance[[2]]$showInfo)
map(dance, ~length(.x$showInfo))
```
#example第4個表演有6個場次，想知道它們的日期時間：
```{r}
dance[[4]]$showInfo[[1]]$time
dance[[4]]$showInfo[[2]]$time
map(dance[[4]]$showInfo, ~.x$time)
```
##num chr也都適用哦!!

#第五章
```{r}
threeHeigths <- c(Gary=178, John=182, Cam=175)
```
#example找出身高最高的人
```{r}
class(threeHeigths)
sort(threeHeigths,decreasing = T) ->pick
names(pick) ->pick2
pick2[[1]] ->highestperson
highestperson
```
```{r}
library(magrittr)
```
```{r}
# 先排序由大到小，
sort(threeHeigths, decreasing=T) -> sorted_heights

# 把排好的人名取出
names(sorted_heights) -> sorted_persons

# 接著取出第一個位置的人名
sorted_persons[[1]] -> highestPerson
```
#可將寫法依轉換成串接無中間物件的方式
```{r}
sort(threeHeigths, decreasing=T) %>% 
names(.) %>%
.[[1]] -> highestPerson
##%>%是用來表示中間物件 再把其他有用到中間物件的位置換成.
#這種概念就叫做pipe operation
```

```{r}
f(w) -> x
g(x) -> y
h(y) -> z
#可改成
f(w) %>%
  g(.) %>% 
  h(.) -> z
```
#example
```{r}
# 由cities創出每個元素對應的北部、東部、中部region factor
cities <- factor(c("台北","花蓮","台東","台中"))
levels(cities)
```
```{r}
cities ->region
levels(region) ->currentLevels
currentLevels
library(stringr)
str_replace(currentLevels,"台北","北部") ->currentLevels1
str_replace(currentLevels1,"花蓮|台東","東部") ->currentLevels2
str_replace(currentLevels2,"台中","中部") ->currentLevels3
currentLevels3
levels(region) <-currentLevels3
region
```
```{r}
region <- cities

# 以下為一連串的pipe operation
levels(region) -> currentLevels
str_replace(currentLevels,"台北","北部") -> currentLevels1
str_replace(currentLevels1,"花蓮|台東","東部") -> currentLevels2
str_replace(currentLevels2,"台中","中部") -> regionLevels
regionLevels -> levels(region)
#可改成
levels(region) %>% 
  str_replace(.,"台北","北部") %>%
  str_replace(.,"花蓮|台東","東部") %>%
  str_replace(.,"台中","中部") ->
  levels(region)
```

```{r}
num <- c(2,97,22,15,7)

# 選出大於50的數字
(num > 50) -> pick_big
num[pick_big]
#可改成
(num > 50) %>%
  num[.]
```
#R在面對pipe時會先把pipe走完最後才去做值assign給最後物件的動作，最後才去做值assign給最後物件的動作，（即->或<-最後進行）

#若遇到pipe 串接的下一段並不是單純的函數的話，可以用{}把此段內容括起來並把前一段output要放的位置換成.。

















